/*
 * This file is generated by jOOQ.
 */
package com.github.joostvdg.cmg.analytics.tables;


import com.github.joostvdg.cmg.analytics.Keys;
import com.github.joostvdg.cmg.analytics.Public;
import com.github.joostvdg.cmg.analytics.tables.records.GenerationrequestsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Generationrequests extends TableImpl<GenerationrequestsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.generationrequests</code>
     */
    public static final Generationrequests GENERATIONREQUESTS = new Generationrequests();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GenerationrequestsRecord> getRecordType() {
        return GenerationrequestsRecord.class;
    }

    /**
     * The column <code>public.generationrequests.id</code>.
     */
    public final TableField<GenerationrequestsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.generationrequests.request_id</code>.
     */
    public final TableField<GenerationrequestsRecord, String> REQUEST_ID = createField(DSL.name("request_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.generationrequests.generation_count</code>.
     */
    public final TableField<GenerationrequestsRecord, Long> GENERATION_COUNT = createField(DSL.name("generation_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.generationrequests.duration</code>.
     */
    public final TableField<GenerationrequestsRecord, Long> DURATION = createField(DSL.name("duration"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.generationrequests.parameters</code>.
     */
    public final TableField<GenerationrequestsRecord, String[]> PARAMETERS = createField(DSL.name("parameters"), SQLDataType.CLOB.getArrayDataType(), this, "");

    /**
     * The column <code>public.generationrequests.map_type</code>.
     */
    public final TableField<GenerationrequestsRecord, String> MAP_TYPE = createField(DSL.name("map_type"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.generationrequests.game_type</code>.
     */
    public final TableField<GenerationrequestsRecord, String> GAME_TYPE = createField(DSL.name("game_type"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.generationrequests.timestamp_request</code>.
     */
    public final TableField<GenerationrequestsRecord, LocalDateTime> TIMESTAMP_REQUEST = createField(DSL.name("timestamp_request"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.generationrequests.host</code>.
     */
    public final TableField<GenerationrequestsRecord, String> HOST = createField(DSL.name("host"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.generationrequests.user_agent</code>.
     */
    public final TableField<GenerationrequestsRecord, String> USER_AGENT = createField(DSL.name("user_agent"), SQLDataType.VARCHAR(255), this, "");

    private Generationrequests(Name alias, Table<GenerationrequestsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Generationrequests(Name alias, Table<GenerationrequestsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.generationrequests</code> table reference
     */
    public Generationrequests(String alias) {
        this(DSL.name(alias), GENERATIONREQUESTS);
    }

    /**
     * Create an aliased <code>public.generationrequests</code> table reference
     */
    public Generationrequests(Name alias) {
        this(alias, GENERATIONREQUESTS);
    }

    /**
     * Create a <code>public.generationrequests</code> table reference
     */
    public Generationrequests() {
        this(DSL.name("generationrequests"), null);
    }

    public <O extends Record> Generationrequests(Table<O> child, ForeignKey<O, GenerationrequestsRecord> key) {
        super(child, key, GENERATIONREQUESTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<GenerationrequestsRecord, Integer> getIdentity() {
        return (Identity<GenerationrequestsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GenerationrequestsRecord> getPrimaryKey() {
        return Keys.GENERATIONREQUESTS_PKEY;
    }

    @Override
    public List<UniqueKey<GenerationrequestsRecord>> getKeys() {
        return Arrays.<UniqueKey<GenerationrequestsRecord>>asList(Keys.GENERATIONREQUESTS_PKEY);
    }

    @Override
    public Generationrequests as(String alias) {
        return new Generationrequests(DSL.name(alias), this);
    }

    @Override
    public Generationrequests as(Name alias) {
        return new Generationrequests(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Generationrequests rename(String name) {
        return new Generationrequests(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Generationrequests rename(Name name) {
        return new Generationrequests(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, Long, Long, String[], String, String, LocalDateTime, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
